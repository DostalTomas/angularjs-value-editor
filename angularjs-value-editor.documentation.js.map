{"version":3,"sources":["webpack://angularjs-value-editor.documentation/webpack/universalModuleDefinition","webpack://angularjs-value-editor.documentation/webpack/bootstrap","webpack://angularjs-value-editor.documentation/./docs/angularjs-value-editor.docs.ts","webpack://angularjs-value-editor.documentation/./src/value-editor/editors/ng-model-connector.ts","webpack://angularjs-value-editor.documentation/./src/value-editor/editors/text/text-value-editor.less?2c41","webpack://angularjs-value-editor.documentation/./src/value-editor/editors/text/text.value-editor.component.ts","webpack://angularjs-value-editor.documentation/./src/value-editor/editors/text/text.value-editor.tpl.pug","webpack://angularjs-value-editor.documentation/./src/value-editor/utils/uuid-generator.ts","webpack://angularjs-value-editor.documentation/./src/value-editor/value-editor.component.ts","webpack://angularjs-value-editor.documentation/./src/value-editor/value-editor.module.ts","webpack://angularjs-value-editor.documentation/./src/value-editor/value-editor.tpl.pug"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAQ,oBAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAiB,4BAA4B;AAC7C;AACA;AACA,0BAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAgB,uBAAuB;AACvC;;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;ACtJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiB;AACkB;AACX;;AAEyB;;;;;;;;;;;;;;;;;;;;;;;;;ICF5B,gB;;;;;;;;;8BAaH;AAAA;;AACV,WAAK,iBAAL,CAAuB,OAAvB,GAAiC,YAAK;AAClC,aAAI,CAAC,UAAL,GAAkB,KAAI,CAAC,iBAAL,CAAuB,UAAzC;AACH,OAFD;AAGH;;;sBAbgB,K,EAAY;AACzB,WAAK,UAAL,GAAkB,KAAlB;AACA,W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","file":"angularjs-value-editor.documentation.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularjs-value-editor.documentation\"] = factory();\n\telse\n\t\troot[\"angularjs-value-editor.documentation\"] = factory();\n})(window, function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"angularjs-value-editor.documentation\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpangularjs_value_editor_documentation\"] = window[\"webpackJsonpangularjs_value_editor_documentation\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"angularjs-value-editor.documentation.vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import 'angular';\nimport '@kpsys/angularjs-register';\nimport 'angular-ui-ace';\n\nimport '../src/value-editor/value-editor.module';\n","import {INgModelController, IOnInit} from 'angular';\n\nexport default class NgModelConnector<MODEL = any> implements IOnInit {\n    public ngModelController: INgModelController;\n    protected modelValue: MODEL;\n\n    public set model(value: MODEL) {\n        this.modelValue = value;\n        this.ngModelController.$setViewValue(this.modelValue);\n    }\n\n    public get model(): MODEL {\n        return this.modelValue;\n    }\n\n    public $onInit(): void {\n        this.ngModelController.$render = () => {\n            this.modelValue = this.ngModelController.$viewValue;\n        };\n    }\n}\n","// removed by extract-text-webpack-plugin","import './text-value-editor.less';\nimport NgModelConnector from '../ng-model-connector';\nimport ValueEditorComponent, {\n    EVENTS,\n    ValueEditorBindings,\n    ValueEditorComponentController,\n    ValueEditorOptions,\n    ValueEditorValidations\n} from '../../value-editor.component';\nimport {IPostLink, IScope} from 'angular';\nimport {Ace} from 'ace-builds';\nimport angular = require('angular');\n\nconst DEFAULT_OPTIONS: TextValueEditorOptions = {\n    type: 'text',\n    aceOptions: {\n        useWrapMode: false,\n        showGutter: true\n    }\n};\n\nexport class TextValueEditorComponentController extends NgModelConnector<string> implements IPostLink {\n    public valueEditorController: ValueEditorComponentController<string, TextValueEditorOptions, TextValueEditorValidations>;\n    public options: TextValueEditorOptions;\n    private aceEditor: Ace.Editor;\n\n    /*@ngInject*/\n    constructor(private $scope: IScope) {\n        super();\n    }\n\n    public $postLink(): void {\n        this.options = angular.merge({}, DEFAULT_OPTIONS, this.valueEditorController.options);\n\n        if (this.options.type === 'rich-textarea') {\n            this.options.aceOptions.onLoad = (ace) => {\n                this.aceEditor = ace;\n                this.initACE();\n            };\n        }\n    }\n\n    /**\n     * Get number of rows between nim and max range.\n     */\n    public getNumberOfRows(minRows: number = 1, maxRows: number = 10): number {\n        if (this.model) {\n            return Math.min(Math.max(this.countRowsInString(this.model), minRows), maxRows);\n        }\n\n        return minRows;\n    }\n\n    /**\n     * Try to count rows in string. if string is without `\\n`, it tries to estimate number of rows. Always return value greater then 0.\n     */\n    private countRowsInString(str: string = ''): number {\n        const rowsCount = ((str.match(/\\n/g) || []).length) + 1;\n\n        if (rowsCount === 1) {\n            return Math.floor(str.length / 60) + 1;\n        }\n\n        return rowsCount;\n    }\n\n    private initACE() {\n        // Original directive doesn't sets model to touched if ACE editor is blurred. This fixes it.\n        this.aceEditor.on('blur', () => {\n            this.valueEditorController.status.$setTouched();\n            this.$scope.$apply();\n        });\n\n        // Propagate disabled -> set Ace to readonly\n        this.aceEditor.setReadOnly(this.valueEditorController.disabled);\n        this.$scope.$on(EVENTS.disabled, (event, {disabled}: {disabled: boolean}) => {\n            this.aceEditor.setReadOnly(disabled);\n        });\n    }\n}\n\n/**\n * @ngdoc component\n * @name textValueEditor\n * @module angularjs-value-editor\n *\n * @requires ng.type.ngModel.NgModelController\n * @requires component:kpValueEditor\n *\n * @description\n * Value editor for text input.\n * Depending on type are four versions:\n * - `text`\n *\n *      Common text input.\n *\n * - `textarea`\n *\n *      Textarea value editor.\n *\n * - `rich-textarea`.\n *\n *      [ACE editor](https://ace.c9.io).\n *\n * Supported options: {@link type:TextValueEditorOptions}\n *\n * Supported validations: {@link type:TextValueEditorValidations}\n *\n * @example\n * <example name=\"textValueEditorExample\" module=\"textValueEditorExample\" frame-no-resize=\"true\">\n *     <file name=\"index.html\">\n *         <main>\n *              <kp-value-editor type=\"'text'\" ng-model=\"model\"></kp-value-editor>\n *              <div>{{model}}</div>\n *         </main>\n *     </file>\n *     <file name=\"script.js\">\n *         angular.module('textValueEditorExample', ['angularjs-value-editor']);\n *     </file>\n * </example>\n */\nexport default class TextValueEditorComponent {\n    public static componentName = 'textValueEditor';\n\n    public require = {\n        ngModelController: 'ngModel',\n        valueEditorController: `^${ValueEditorComponent.componentName}`\n    };\n\n    public templateUrl = require('./text.value-editor.tpl.pug');\n\n    public controller = TextValueEditorComponentController;\n}\n\nexport type TTextValueEditorType = 'text' | 'textarea' | 'rich-textarea';\n\nexport interface TextValueEditorOptions extends ValueEditorOptions {\n    type?: TTextValueEditorType;\n    aceOptions?: any;\n}\n\nexport interface TextValueEditorValidations extends ValueEditorValidations {\n    minlength?: number;\n    maxlength?: number;\n    pattern?: string | RegExp;\n}\n\nexport interface TextValueEditorBindings extends ValueEditorBindings<TextValueEditorOptions, TextValueEditorValidations> {\n}\n\n/**\n * @ngdoc type\n * @name TextValueEditorOptions\n * @module angularjs-value-editor\n *\n * @property {string} type Input type. Possible values are `text`, `textarea`, `rich-textarea`.\n * @property {object} aceOptions Options for ACE editor. Applicable only if `type` is `'rich-textarea'`.\n *\n * @description\n * Extends {@link type:ValueEditorOptions}\n * Default value:\n * ```javascript\n *  {\n *      type: 'text',\n *      aceOptions: {\n *          useWrapMode: false,\n *          showGutter: true\n *      }\n *  }\n * ```\n */\n\n/**\n * @ngdoc type\n * @name TextValueEditorValidations\n * @module angularjs-value-editor\n *\n * @property {number=} minlength Min length.\n * @property {number=} maxlength Max length.\n * @property {string=} pattern Regexp pattern.\n *\n * @description\n * Extends {@link type:ValueEditorValidations}\n */\n","var path = '/value-editor/editors/text/text.value-editor.tpl.pug';\nvar html = \"<!-- TEXT--><input ng-if=\\\"$ctrl.options.type === 'text'\\\" type=\\\"{{$ctrl.options.type}}\\\" id=\\\"{{$ctrl.valueEditorController.editorId}}\\\" name=\\\"{{$ctrl.valueEditorController.name}}\\\" placeholder=\\\"{{$ctrl.valueEditorController.placeholder}}\\\" ng-class=\\\"$ctrl.options.cssClasses\\\" ng-model=\\\"$ctrl.model\\\" ng-model-options=\\\"{ getterSetter: true}\\\" ng-disabled=\\\"$ctrl.valueEditorController.disabled\\\" ng-required=\\\"$ctrl.valueEditorController.validations.required\\\" ng-minlength=\\\"$ctrl.valueEditorController.validations.minlength\\\" ng-maxlength=\\\"$ctrl.valueEditorController.validations.maxlength\\\" ng-pattern=\\\"$ctrl.valueEditorController.validations.pattern\\\" data-main-input=\\\"data-main-input\\\"/><!-- TEXTAREA--><textarea ng-if=\\\"$ctrl.options.type === 'textarea'\\\" id=\\\"{{$ctrl.valueEditorController.editorId}}\\\" name=\\\"{{$ctrl.valueEditorController.name}}\\\" placeholder=\\\"{{$ctrl.valueEditorController.placeholder}}\\\" rows=\\\"{{$ctrl.getNumberOfRows()}}\\\" ng-class=\\\"$ctrl.options.cssClasses\\\" ng-model=\\\"$ctrl.model\\\" ng-model-options=\\\"{ getterSetter: true}\\\" ng-trim=\\\"false\\\" ng-disabled=\\\"$ctrl.valueEditorController.disabled\\\" ng-required=\\\"$ctrl.valueEditorController.validations.required\\\" ng-minlength=\\\"$ctrl.valueEditorController.validations.minlength\\\" ng-maxlength=\\\"$ctrl.valueEditorController.validations.maxlength\\\" ng-pattern=\\\"$ctrl.valueEditorController.validations.pattern\\\" data-main-input=\\\"data-main-input\\\"></textarea><!-- ACE EDITOR--><div class=\\\"ace-editor\\\" ng-if=\\\"$ctrl.options.type === 'rich-textarea'\\\" id=\\\"{{$ctrl.valueEditorController.editorId}}\\\" name=\\\"{{$ctrl.valueEditorController.name}}\\\" ng-class=\\\"$ctrl.options.cssClasses\\\" ui-ace=\\\"$ctrl.options.aceOptions\\\" ng-model=\\\"$ctrl.model\\\" ng-model-options=\\\"{ getterSetter: true}\\\" ng-disabled=\\\"$ctrl.valueEditorController.disabled\\\" ng-required=\\\"$ctrl.valueEditorController.validations.required\\\" ng-minlength=\\\"$ctrl.valueEditorController.validations.minlength\\\" ng-maxlength=\\\"$ctrl.valueEditorController.validations.maxlength\\\" ng-pattern=\\\"$ctrl.valueEditorController.validations.pattern\\\" data-main-input=\\\"data-main-input\\\"></div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;","export function generateUuid(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        // tslint:disable-next-line\n        const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n","import {IFormController, INgModelController, IOnChanges, IOnInit, IScope} from 'angular';\nimport NgModelConnector from './editors/ng-model-connector';\nimport {generateUuid} from './utils/uuid-generator';\n\nexport type TValueEditorType = 'text' | 'number' | 'text-area' | 'rich-textarea';\n\nexport const EVENTS = Object.freeze({\n    disabled: 'value-editor:disabled'\n});\n\nexport abstract class ValueEditorComponentController<MODEL = any, EDITOROPTS extends ValueEditorOptions = ValueEditorOptions, EDITORVALIDATIONS extends ValueEditorValidations = ValueEditorValidations>\n    extends NgModelConnector<MODEL>\n    implements ValueEditorBindings<EDITOROPTS, EDITORVALIDATIONS>, IOnInit, IOnChanges {\n\n    /* Bindings */\n    public editorId: string;\n    public name: string;\n    public type: TValueEditorType;\n    public placeholder: string;\n    public disabled: boolean;\n    public visible: boolean;\n    public validations: EDITORVALIDATIONS;\n    public options: EDITOROPTS;\n    /* Internal */\n    public form: IFormController;\n\n    public get status() {\n        return this.form[this.name];\n    }\n\n    public set status(s) {\n        //\n    }\n\n    /*@ngInject*/\n    constructor(private $scope: IScope) {\n        super();\n    }\n\n    public $onInit(): void {\n        super.$onInit();\n\n        if (!this.name) {\n            this.name = this.generateEditorName();\n        }\n    }\n\n    public $onChanges(onChangesObj: angular.IOnChangesObject): void {\n        if (onChangesObj.disabled) {\n            this.$scope.$broadcast(EVENTS.disabled, {disabled: onChangesObj.disabled.currentValue});\n        }\n    }\n\n    private generateEditorName(): string {\n        return this.editorId || `${this.type}_${generateUuid()}`;\n    }\n}\n\n/**\n * @ngdoc component\n * @name kpValueEditor\n * @module angularjs-value-editor\n *\n * @requires ng.type.ngModel.NgModelController\n *\n * @param {string} editorId Input id.\n * @param {string} name Input name.\n * @param {string} placeholder Placeholder.\n * @param {string} type ValueEditor type. <.\n * @param {boolean} disabled If input is disabled. <.\n * @param {boolean} visible If input is visible. <.\n * @param {ValueEditorValidations} validations ValueEditor validations. <.\n * @param {ValueEditorOptions} options ValueEditor options. Type depends on ValueEditor type.\n * @param {ng.type.ngModel.NgModelController} status Status of input.\n *\n * @description\n * Generic value editor depends on type:\n *\n * - `text`, `textarea`, `rich-textarea`: {@link component:textValueEditor}\n */\nexport default class ValueEditorComponent {\n    public static componentName = 'kpValueEditor';\n\n    public require = {\n        ngModelController: 'ngModel'\n    };\n\n    public bindings = {\n        editorId: '@?',\n        name: '@?',\n        placeholder: '@?',\n        type: '<',\n        disabled: '<?',\n        visible: '<?',\n        validations: '<?',\n        options: '<?',\n        status: '=?'\n    };\n\n    public controller = ValueEditorComponentController;\n\n    public templateUrl = require('./value-editor.tpl.pug');\n}\n\nexport interface ValueEditorValidations {\n    required?: boolean;\n}\n\nexport interface ValueEditorOptions {\n    cssClasses?: string[];\n}\n\nexport interface ValueEditorBindings<EDITOROPTS extends ValueEditorOptions = ValueEditorOptions, EDITORVALIDATIONS extends ValueEditorValidations = ValueEditorValidations> {\n    editorId?: string;\n    name?: string;\n    type?: TValueEditorType;\n    placeholder?: string;\n    disabled?: boolean;\n    visible?: boolean;\n    validations?: EDITORVALIDATIONS;\n    options?: EDITOROPTS;\n    status?: INgModelController;\n}\n\n/**\n * @ngdoc type\n * @name ValueEditorValidations\n * @module angularjs-value-editor\n *\n * @property {boolean=} required Optional required validation.\n */\n\n/**\n * @ngdoc type\n * @name ValueEditorOptions\n * @module angularjs-value-editor\n *\n * @property {string[]} [cssClasses] Optional additional CSS classes\n */\n","import register from '@kpsys/angularjs-register';\nimport 'angular-ui-ace';\nimport ValueEditorComponent from './value-editor.component';\nimport TextValueEditorComponent from './editors/text/text.value-editor.component';\n\n/**\n * @ngdoc module\n * @name angularjs-value-editor\n * @module angularjs-value-editor\n */\n\nexport default register('angularjs-value-editor', ['ui.ace'])\n    .component(ValueEditorComponent.componentName, ValueEditorComponent)\n    .component(TextValueEditorComponent.componentName, TextValueEditorComponent)\n    .name();\n\n/**\n * @typedef ng.type.ngModel\n * @typedef ng.type.ngModel.NgModelController\n */\n","var path = '/value-editor/value-editor.tpl.pug';\nvar html = \"<div ng-form=\\\"$ctrl.form\\\" ng-switch=\\\"$ctrl.type\\\"><text-value-editor ng-switch-when=\\\"text\\\" ng-model=\\\"$ctrl.model\\\" ng-model-options=\\\"{ getterSetter: true }\\\"></text-value-editor></div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;"],"sourceRoot":""}